// Code generated by counterfeiter. DO NOT EDIT.
package vaultfakes

import (
	"sync"

	"github.com/cloudfoundry-community/vaultkv"
	vaulta "github.com/starkandwayne/safe/vault"
	"github.com/starkandwayne/vault-concourse-resource/vault"
)

type FakeClient struct {
	ClientStub        func() *vaultkv.KV
	clientMutex       sync.RWMutex
	clientArgsForCall []struct {
	}
	clientReturns struct {
		result1 *vaultkv.KV
	}
	clientReturnsOnCall map[int]struct {
		result1 *vaultkv.KV
	}
	ConstructSecretsStub        func(string, vaulta.TreeOpts) (vaulta.Secrets, error)
	constructSecretsMutex       sync.RWMutex
	constructSecretsArgsForCall []struct {
		arg1 string
		arg2 vaulta.TreeOpts
	}
	constructSecretsReturns struct {
		result1 vaulta.Secrets
		result2 error
	}
	constructSecretsReturnsOnCall map[int]struct {
		result1 vaulta.Secrets
		result2 error
	}
	WriteStub        func(string, *vaulta.Secret) error
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		arg1 string
		arg2 *vaulta.Secret
	}
	writeReturns struct {
		result1 error
	}
	writeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Client() *vaultkv.KV {
	fake.clientMutex.Lock()
	ret, specificReturn := fake.clientReturnsOnCall[len(fake.clientArgsForCall)]
	fake.clientArgsForCall = append(fake.clientArgsForCall, struct {
	}{})
	fake.recordInvocation("Client", []interface{}{})
	fake.clientMutex.Unlock()
	if fake.ClientStub != nil {
		return fake.ClientStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.clientReturns
	return fakeReturns.result1
}

func (fake *FakeClient) ClientCallCount() int {
	fake.clientMutex.RLock()
	defer fake.clientMutex.RUnlock()
	return len(fake.clientArgsForCall)
}

func (fake *FakeClient) ClientCalls(stub func() *vaultkv.KV) {
	fake.clientMutex.Lock()
	defer fake.clientMutex.Unlock()
	fake.ClientStub = stub
}

func (fake *FakeClient) ClientReturns(result1 *vaultkv.KV) {
	fake.clientMutex.Lock()
	defer fake.clientMutex.Unlock()
	fake.ClientStub = nil
	fake.clientReturns = struct {
		result1 *vaultkv.KV
	}{result1}
}

func (fake *FakeClient) ClientReturnsOnCall(i int, result1 *vaultkv.KV) {
	fake.clientMutex.Lock()
	defer fake.clientMutex.Unlock()
	fake.ClientStub = nil
	if fake.clientReturnsOnCall == nil {
		fake.clientReturnsOnCall = make(map[int]struct {
			result1 *vaultkv.KV
		})
	}
	fake.clientReturnsOnCall[i] = struct {
		result1 *vaultkv.KV
	}{result1}
}

func (fake *FakeClient) ConstructSecrets(arg1 string, arg2 vaulta.TreeOpts) (vaulta.Secrets, error) {
	fake.constructSecretsMutex.Lock()
	ret, specificReturn := fake.constructSecretsReturnsOnCall[len(fake.constructSecretsArgsForCall)]
	fake.constructSecretsArgsForCall = append(fake.constructSecretsArgsForCall, struct {
		arg1 string
		arg2 vaulta.TreeOpts
	}{arg1, arg2})
	fake.recordInvocation("ConstructSecrets", []interface{}{arg1, arg2})
	fake.constructSecretsMutex.Unlock()
	if fake.ConstructSecretsStub != nil {
		return fake.ConstructSecretsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.constructSecretsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ConstructSecretsCallCount() int {
	fake.constructSecretsMutex.RLock()
	defer fake.constructSecretsMutex.RUnlock()
	return len(fake.constructSecretsArgsForCall)
}

func (fake *FakeClient) ConstructSecretsCalls(stub func(string, vaulta.TreeOpts) (vaulta.Secrets, error)) {
	fake.constructSecretsMutex.Lock()
	defer fake.constructSecretsMutex.Unlock()
	fake.ConstructSecretsStub = stub
}

func (fake *FakeClient) ConstructSecretsArgsForCall(i int) (string, vaulta.TreeOpts) {
	fake.constructSecretsMutex.RLock()
	defer fake.constructSecretsMutex.RUnlock()
	argsForCall := fake.constructSecretsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) ConstructSecretsReturns(result1 vaulta.Secrets, result2 error) {
	fake.constructSecretsMutex.Lock()
	defer fake.constructSecretsMutex.Unlock()
	fake.ConstructSecretsStub = nil
	fake.constructSecretsReturns = struct {
		result1 vaulta.Secrets
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ConstructSecretsReturnsOnCall(i int, result1 vaulta.Secrets, result2 error) {
	fake.constructSecretsMutex.Lock()
	defer fake.constructSecretsMutex.Unlock()
	fake.ConstructSecretsStub = nil
	if fake.constructSecretsReturnsOnCall == nil {
		fake.constructSecretsReturnsOnCall = make(map[int]struct {
			result1 vaulta.Secrets
			result2 error
		})
	}
	fake.constructSecretsReturnsOnCall[i] = struct {
		result1 vaulta.Secrets
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Write(arg1 string, arg2 *vaulta.Secret) error {
	fake.writeMutex.Lock()
	ret, specificReturn := fake.writeReturnsOnCall[len(fake.writeArgsForCall)]
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		arg1 string
		arg2 *vaulta.Secret
	}{arg1, arg2})
	fake.recordInvocation("Write", []interface{}{arg1, arg2})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		return fake.WriteStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.writeReturns
	return fakeReturns.result1
}

func (fake *FakeClient) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeClient) WriteCalls(stub func(string, *vaulta.Secret) error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = stub
}

func (fake *FakeClient) WriteArgsForCall(i int) (string, *vaulta.Secret) {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	argsForCall := fake.writeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) WriteReturns(result1 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) WriteReturnsOnCall(i int, result1 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	if fake.writeReturnsOnCall == nil {
		fake.writeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.clientMutex.RLock()
	defer fake.clientMutex.RUnlock()
	fake.constructSecretsMutex.RLock()
	defer fake.constructSecretsMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ vault.Client = new(FakeClient)
